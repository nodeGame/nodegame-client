:qwq# nodegame-client change log

## 1.0.1 (current)

 - `#node.set()` accepts a third optional parameter specifying the text of the message. This way it is possible to define on.data listeners on receiver.
 - The return value of the done callback function changed meaning. If it is strictly equal to FALSE, it stops the procedure. If it is equal to any other value different from undefined, then the return value replacesthe arguments of node.done to be sent to server. For retro-compatibility TRUE is not sent to server (for the moment).
 - `#Game.getNextStep() returns the next game stage (if no loops are involved).
 - `#Game.getPreviousStep() returns the past game stage (if no loops are involved).
 - GameDB select queries can now select stages by name/id and not only hash-string (e.g. 3.1.1).
 - The endpoint of the channel in `#node.connect()` is automatically taken from the name of the game (window.location.pathname), if none is specified (only in the browser). This is consistent with the change in nodegame-server that sets the default value of the endpoint to the game name.
 - Query parameters are automatically passed to `#node.connect()` when node is executed in the browser. They can still be overridden by passing a configuration object.
 - `#GameDB.add() replaces the checkings done by on('insert').
 - Stager: `frame.autoParse` option will parse the DOM of loaded frames to substitute .innerHTML elements properties of elements matching ids or class names.
 - Fixed bug for default context of `#node.env()` in Node.js.
 - Fixed bug with node.done with more than 2 parameters.


## 1.0.0

 - Enhanced stager, builds blocks and randomize blocks, stages, and steps.
 - Optimized EventEmitter.
 - `#node.done()` is asynchronous to avoid calling multiple node.done() in the same step.
 - `#node.done()` evaluates the done handler immediately, and then eventually emit 'DONE'. This makes node.done and emit('DONE') different, because emit('DONE') does not evaluate the done handler any more.
 - After 'PLAYING' is emitted, if a frame is loaded by `#GameWindow.loadFrame()` the game level will not change again to 'WINDOW_LOADED` and then `PLAYING`. That was causing issues with sychronization.
 - `#Game.isReady()` does not look anymore at the status of the GameWindow. Once PLAYING has been emitted, if the game is not paused or done was called it return TRUE.
 - New game levels: 'LOADING_FRAME' (reserved, not used), 'FRAME_LOADED' (reserved, not used)..
 - Removed game level: 'WINDOW_LOADED'.
 - `node.emitAsync()` emits event asynchrounosly (does not return a value).
 - `#node.get()` uses a nodeGame timer instead of Javascript timeOuts, so it can synchronize with game events, such as pause and resume.
 - `#node.get()` checks the id of the message to make sure that only the actual recipient can reply to it.
 - Fixed bug on parameter timeout of `node.get`.
 - `#EventEmitterManager.printAll()` and `#EventEmitterManager.getAll()`
 - Avoiding multiple calls to `#node.socket.disconnect()`
 - It is possible to use the name of a function to remove it from the event emitter.
 - Remote logging is enabled. By default only errors are sent to server as LOG messages.
 - Default level for logged message is 'info'. Before it was 'warn'.
 - More support for IE8.
 - 'SOCKET_CONNECTING' event when a socket start the connecting procedure.
 - Removed group event-listeners.
 - Check if there are more than 1 node instances on the browser.
 - `#Game.pause()` and `#Game.resume()` accept a parameter to be passed along the emitted events.
 - `#NodeGameClient.getCurrentEventEmitter()` improved to return the stage event emitter.
 - `#Game.shouldStep()` accepts the stageLevel as parameter.
 - `#Game.setStageLevel()`, `#Game.setStateLevel()` and `#Game.setCurrentGameStage()` accept a modifier to force or skip the publish of the update.
 - Enhanced checks for avoiding clients getting out of sync.
 - 'GETTING_DONE' stage level introduced to signal that the DONE procedure is being executed.
 - Travis Integration.
 - Version number correctly added to build file.
 - `publishLevel` and `syncOnLoaded` are properties of the stager and not of `game.game_settings`.
 - `game.game_metadata` -> `game.metadata`.
 - `game.game_settings` -> `game.settings`.
 - `game.settings` contains treatment's settings now.
 - `#node.socket.reconnect()` reconnects with same settings.
 - Improved logged output.
 - `#node.deregisterSetup()`.
 - `#node.isGameover()`.
 - EventEmitter and EventEmitterManager can track changes. See `#setRecordChanges()` and `#getChanges()`.
 - `#EventEmitter.remove() returns removed listeners or empty array.
 - `Socket.emitOutMsg` option.
 - Frame loading can be defined directly in the game stage/step definition.
 - New stage properties can be defined globally: `frame` and `cb`.
 - Parameters given to `#node.done()` are automatically sent to server with `#node.set()`; the time from the beginning of the step, and a flag indicating if it was timeup are added to the parameters, if not already specified.
 - Flattened down the structure of entries in `node.game.memory`. Removed GameBit.
 - `#node.set(obj, to) takes only one object and a recipient (was node.set(key, value, to).
 - `autoSet` option specifies whether a SET message should be sent to SERVER when node.done() is called.
 - Game message target `BYE` causes a client side disconnection.
 - `#node.get()` syntax changed. Fourth parameters is `options` and contains more options.
 - Removed `node.fs` object. Developers should use native NDDB methods to save to csv format.
 - `#Stager.loop()` and `#Stager.doLoop()` must have a loop function, no default provided.
 - `#node.setLanguage() takes a second parameter to automatically set W.setUriPrefix to node.lang.path.
 - Removed property .on from stages and steps.
 - Added property .exit in stages and steps. It is a callback that is executed before entering the next stage/step.


## 0.9.9

 - Error Manager removed in Node.JS (use ServerNode instead).

## 0.9.8

 - Updated FS lib to latest NDDB.

## 0.9.7

 - `node.game.globals` added.
 - Documentation for Sockets added.
 - Several documentation fixes.

## 0.9.6

 - Stager.extendStage fixed

## 0.9.5

 - Standardized msg log with the server (same as winston now)
 - Fixed bug caused by alias on the server
 - Refactored Stager api
 - Socket Direct Messagging is asynchronous

## 0.9.4

 - LANG added to the list of targets.
 - node.player.lang contains the preferred language of the client
 - `#node.setLanguage()`, '#node.on.lang()`
 - GET messages fire in the receiver an event like "get.<label>". Previously was just "<label>", where "<label>" is the string passed by the get caller.

## 0.9.3

 - Stager refactored to build the sequence first and add stages later.
 - Globals defined in the stager are added to _game.globals_ and updated at each step.
 - `#Game.getCurrentStepProperty() added.
 - `#GamePlot.getGlobals() added.
 - Fixed problem with timer resuming.
 - Other minor fixes.

## 0.9.1

  - GameMsg id and session fields are not write-protected any more.
  - `#GameTimer.start()` and `#GameTimer.stop()` do more robust checkings on initial conditions.

## 0.9.0

  - Change log new version starts here

## Above 0.6.2

  - Full msg listeners are attached immediately after receiving a HI msg, that could lead to losing the first messages.

## 0.6.2

  - Docker is optional dev
  - Fixed bug in GameLoop.size() when no state was added
  - Fixed possible memory leak in GameLoop limits object
  - Command copyto copies all files in build directory to another folder in make.js
  - In the configuration object url key is not read anymore, host parameter is optional

# 0.6.0

  - Remote setup of clients
  - setup method to configure all important properties of the game
  - connect and play methodsare now separated. It is possible
	to play without connecting, and connecting without playing
  - nodegame-client can connect to the server via the Socket interface: direct or sio
  - GameSession object enhanced
  - Automated tests on integration server travis-ci
  - Standardized variable naming:
	node.iss -> node.is,
	node.actions -> node.action

## 0.4.5

  - events.dumpEvents added to configuration object
  - added examples folder
  - added solo_mode

## 0.4.0

  - events.history added to configuration object
  - fixed bug onDATA
  - several bug fixing
  - PCONNECT, PDISCONNECT, MCONNECT, MDISCONNECT, MLIST events added
  - node.ee -> node.events
  - node.gsc -> node.socket


## 0.2.10

  - node.redirect (for monitor only)
  - better make file
  - cleanup

## 0.2.0

  - Major refactoring
